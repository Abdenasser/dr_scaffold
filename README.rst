.. raw:: html

    <p align="center"><a href="https://github.com/Abdenasser/dr_scaffold"><img src="https://ph-files.imgix.net/99f3cc0a-58b1-4c16-bb41-1963b0a692fc.png" alt="dr_scaffold blueprint icon" height="80"/></a></p>
    <h1 align="center">dr_scaffold</h1>
    <p align="center">Scaffold django rest apis like a champion âš¡. said no one before</p>

    <p align="center">
        <a href="https://codecov.io/gh/Abdenasser/dr_scaffold"><img src="https://codecov.io/gh/Abdenasser/dr_scaffold/branch/main/graph/badge.svg?token=VLUZWSTJV2"/></a> <a href="https://app.travis-ci.com/Abdenasser/dr_scaffold"><img src="https://app.travis-ci.com/Abdenasser/dr_scaffold.svg?branch=main"/></a> <a href="https://opensource.org/licenses/MIT"><img src="https://img.shields.io/pypi/l/ansicolortags.svg"/></a> <a href="https://pypi.org/project/dr-scaffold/"><img src="https://d25lcipzij17d.cloudfront.net/badge.svg?id=py&r=r&type=6e&v=2.0.0&x2=0"/></a> <a href="https://twitter.com/intent/tweet?text=Scaffold django rest apis like a champion âš¡. said no one before.&url=https://github.com/Abdenasser/dr_scaffold&hashtags=python,opensource,django,api,developers"><img src="http://randojs.com/images/tweetShield.svg" alt="Tweet" height="20"/></a>
    
    </p> 
    

Overview
--------

This library will help you to scaffold full **Restful API Resources** in seconds using only one command:

.. code:: console

    $ python manage.py dr_scaffold blog Post body:textfield author:foreignkey:Author

    ðŸŽ‰ Your RESTful Post api resource is ready ðŸŽ‰

-  ``models.py`` with Models and fields generated by the CLI âš¡
-  ``admin.py`` with Models registered and ready âš¡
-  ``views.py`` with appropriate ViewSets readyâš¡
-  ``urls.py`` with appropriate URLs ready.âš¡
-  ``serializers.py`` with Model Serializers ready âš¡
-  and more ...
.. raw:: html
   </br></br>


Installation and usage
----------------------

For a detailed guide read `scaffold django apis like a champion <https://www.abdenasser.com/scaffold-django-apis>`_
*******************************************************************************************************************

This library assumes that you have setup your project with **Django Rest
Framework**.
if not, please refer to `this guide <https://www.django-rest-framework.org/#installation>`_

1- Install dr_scaffold package :
================================

.. code:: console

    $ pip install dr-scaffold

2- Add ``dr_scaffold`` to your INSTALLED\_APPS like this:
=========================================================

.. code:: python

    INSTALLED_APPS = [
        ...
        'dr_scaffold'
    ]

3- If you are using a custom API structure, add ``CORE_FOLDER`` and ``API_FOLDER`` to your ``settings.py``:
===========================================================================================================

.. code:: python
    
    #include a forward slash at the end of each

    CORE_FOLDER = "my_core_folder/" # you can leave them empty
    API_FOLDER = "my_api_folder/"   # or set them to be the same

4- Run the your scaffolds like this:
====================================

.. code:: console

    $ python manage.py dr_scaffold blog Post body:textfield author:foreignkey:Author --mixins CRUD

    ðŸŽ‰ Your RESTful Post api resource is ready ðŸŽ‰


.. raw:: html
   </br></br>

Supported ViewSet types
-----------------------

We support two types of ViewSets, we support **ModelViewSet** and we support **ViewSets** with Mixins. 

- ModelViewSets are the default that get generated with the dr_scaffold command
- To generate a view with Mixins pass a value of what mixins you want to include like ``--mixins CRUD`` this will result in a view with the Create, List, Retrieve, Update, Destroy actions.

Let's generate an API that does only support the **Create** and **Read** methods (Read is both list and retrieve):

.. code:: console

    $ python manage.py dr_scaffold blog Author name:charfield --mixins CR
    
    ðŸŽ‰ Your RESTful Post api resource is ready ðŸŽ‰


The command will generate an Author API with a ViewSet like the following:

.. code:: python

    class AuthorViewSet(
        mixins.CreateModelMixin,
        mixins.ListModelMixin,
        mixins.RetrieveModelMixin,
        viewsets.GenericViewSet
    ):
        queryset = Author.objects.all()
        serializer_class = AuthorSerializer
        #permission_classes = (permissions.IsAuthenticated,)

        def get_queryset(self):
            #user = self.request.user
            queryset = Author.objects.all()
            #insert specific queryset logic here
            return queryset

        def get_object(self):
            #insert specific get_object logic here
            return super().get_object()

        def create(self, request, *args, **kwargs):
            serializer = AuthorSerializer(data=request.data)
            serializer.is_valid(raise_exception=True)
            serializer.save()
            return Response(serializer.data)

        def list(self, request, *args, **kwargs):
            queryset = self.get_queryset()
            serializer = AuthorSerializer(queryset, many=True)
            return Response(serializer.data)

        def retrieve(self, request, *args, **kwargs):
            instance = self.get_object()
            serializer = AuthorSerializer(instance=instance)
            return Response(serializer.data)

.. raw:: html
   </br></br>
   
Supported field types
---------------------

We support most of django field types.

.. raw:: html
   </br></br>

TODO
----

-  add an option to include swagger documentation

